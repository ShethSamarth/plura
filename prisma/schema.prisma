generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  AGENCY_OWNER
  AGENCY_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

enum TriggerTypes {
  CONTACT_FORM
}

enum ActionType {
  CREATE_CONTACT
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

enum Plan {
  price_1OYxkqFj9oKEERu1NbKUxXxN
  price_1OYxkqFj9oKEERu1KfJGWxgN
}

model User {
  id        String @id @default(uuid())
  name      String
  avatarUrl String @db.Text
  email     String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role         Role           @default(SUBACCOUNT_USER)
  agencyId     String?
  Agency       Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  Permissions  Permissions[]
  Ticket       Ticket[]
  Notification Notification[]

  @@index([agencyId])
}

model Permissions {
  id     String  @id @default(uuid())
  email  String
  access Boolean

  User         User       @relation(fields: [email], references: [email], onDelete: Cascade)
  subAccountId String
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
  @@index([email])
}

model Agency {
  id               String  @id @default(uuid())
  connectAccountId String? @default("")
  customerId       String  @default("")
  name             String
  agencyLogo       String  @db.Text
  companyEmail     String  @db.Text
  companyPhone     String
  whiteLabel       Boolean @default(true)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  goal             Int     @default(5)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users         User[]
  SubAccount    SubAccount[]
  SidebarOption AgencySidebarOption[]
  Invitation    Invitation[]
  Notification  Notification[]
  Subscription  Subscription?
  AddOns        AddOns[]
}

model SubAccount {
  id               String  @id @default(uuid())
  connectAccountId String? @default("")
  name             String
  subAccountLogo   String  @db.Text
  companyEmail     String  @db.Text
  companyPhone     String
  goal             Int     @default(5)
  address          String
  city             String
  zipCode          String
  state            String
  country          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agencyId      String
  Agency        Agency                    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SidebarOption SubAccountSidebarOption[]
  Permissions   Permissions[]
  Funnels       Funnel[]
  Media         Media[]
  Contact       Contact[]
  Trigger       Trigger[]
  Automation    Automation[]
  Pipeline      Pipeline[]
  Tags          Tag[]
  Notification  Notification[]

  @@index([agencyId])
}

model Tag {
  id    String @id @default(uuid())
  name  String
  color String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subAccountId String
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket       Ticket[]

  @@index([subAccountId])
}

model Pipeline {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Lane         Lane[]
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId String

  @@index([subAccountId])
}

model Lane {
  id    String @id @default(uuid())
  name  String
  order Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String
  Tickets    Ticket[]

  @@index([pipelineId])
}

model Ticket {
  id          String   @id @default(uuid())
  name        String
  order       Int      @default(0)
  value       Decimal?
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  laneId         String
  Lane           Lane     @relation(fields: [laneId], references: [id], onDelete: Cascade)
  Tags           Tag[]
  customerId     String?
  Customer       Contact? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  assignedUserId String?
  Assigned       User?    @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@index([laneId])
  @@index([customerId])
  @@index([assignedUserId])
}

model Trigger {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type         TriggerTypes
  subAccountId String
  Subaccount   SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Automations  Automation[]

  @@index([subAccountId])
}

model Automation {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  triggerId String?
  published Boolean  @default(false)

  Trigger            Trigger?             @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  subAccountId       String
  Subaccount         SubAccount           @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Action             Action[]
  AutomationInstance AutomationInstance[]

  @@index([triggerId])
  @@index([subAccountId])
}

model AutomationInstance {
  id     String  @id @default(uuid())
  active Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  automationId String
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@index([automationId])
}

model Action {
  id     String @id @default(uuid())
  name   String
  order  Int
  laneId String @default("0")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type         ActionType
  automationId String
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)

  @@index([automationId])
}

model Contact {
  id    String @id @default(uuid())
  name  String
  email String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subAccountId String
  Subaccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket       Ticket[]

  @@index([subAccountId])
}

model Media {
  id   String  @id @default(uuid())
  type String?
  name String
  link String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subAccountId String
  Subaccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

model Funnel {
  id            String  @id @default(uuid())
  name          String
  description   String?
  published     Boolean @default(false)
  subDomainName String? @unique
  favicon       String? @db.Text
  liveProducts  String? @default("[]")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subAccountId String
  SubAccount   SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  FunnelPages  FunnelPage[]
  ClassName    ClassName[]

  @@index([subAccountId])
}

model ClassName {
  id         String  @id @default(uuid())
  name       String
  color      String
  customData String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  funnelId String
  Funnel   Funnel @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model FunnelPage {
  id           String  @id @default(uuid())
  name         String
  pathName     String  @default("")
  visits       Int     @default(0)
  content      String? @db.Text
  order        Int
  previewImage String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  funnelId String
  Funnel   Funnel @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model AgencySidebarOption {
  id   String @id @default(uuid())
  name String @default("Menu")
  link String @default("#")
  icon Icon   @default(info)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agencyId String
  Agency   Agency? @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
}

model SubAccountSidebarOption {
  id   String @id @default(uuid())
  name String @default("Menu")
  link String @default("#")
  icon Icon   @default(info)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId String?

  @@index([subAccountId])
}

model Invitation {
  id    String @id @default(uuid())
  email String @unique

  agencyId String
  Agency   Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  status   InvitationStatus @default(PENDING)
  role     Role             @default(SUBACCOUNT_USER)

  @@index([agencyId])
}

model Notification {
  id           String @id @default(uuid())
  notification String

  userId       String
  User         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  agencyId     String
  Agency       Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  subAccountId String?
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
  @@index([subAccountId])
  @@index([userId])
}

model Subscription {
  id                   String   @id @default(uuid())
  plan                 Plan?
  price                String?
  active               Boolean  @default(false)
  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agencyId String? @unique
  Agency   Agency? @relation(fields: [agencyId], references: [id])

  @@index([customerId])
}

model AddOns {
  id      String  @id @default(uuid())
  name    String
  active  Boolean @default(false)
  priceId String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agencyId String?
  Agency   Agency? @relation(fields: [agencyId], references: [id])

  @@index([agencyId])
}
